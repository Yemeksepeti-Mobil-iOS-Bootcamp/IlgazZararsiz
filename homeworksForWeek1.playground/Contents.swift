import UIKit

// Euler Question 1

/*If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

Find the sum of all the multiples of 3 or 5 below 1000.*/

func sum (number: Int) -> Int {
    var total = 0
    
    for i in 1 ..< number {
        if (i % 3 == 0 || i % 5 == 0) {
            total += i
        }
    }
    return total
}

print(sum(number: 1000))

// Euler Question 2

/*
 Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

 By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
*/

func sumOfFibonacciSequence (number: Int) -> Int{
    
    var total = 0
    var firstNum = 1
    var lastNum = 1

    while lastNum < number {
        if lastNum % 2 == 0 {
            total += lastNum
        }
        let fib = firstNum + lastNum
        firstNum = lastNum
        lastNum = fib
    }
    return total
}

print(sumOfFibonacciSequence(number: 4000000))

// Euler Question 3

/*
 The prime factors of 13195 are 5, 7, 13 and 29.

 What is the largest prime factor of the number 600851475143 ?
 
 */

func calculateLargestPrimeFactor (number: Int) -> Int {

    var numberFactor = number
    var primeFactor = 2

    while numberFactor > 1 {
        if (numberFactor % primeFactor == 0) {
            numberFactor /= primeFactor
        }
        else {
            primeFactor += 1
        }
    }
    return primeFactor
}

print(calculateLargestPrimeFactor(number: 600851475143))

